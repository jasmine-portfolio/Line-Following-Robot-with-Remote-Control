var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');

var Hwi = xdc.useModule('ti.sysbios.family.c28.Hwi');
var Boot = xdc.useModule('ti.catalog.c2800.initF2837x.Boot');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var ti_sysbios_family_c28_Timer = xdc.useModule('ti.sysbios.family.c28.Timer');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var ti_sysbios_hal_Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 */
Defaults.common$.namedModule = false;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
 */
Text.isLoaded = false;

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
 */
SysMin.flushAtExit = false;

/* 
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x0;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x100;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 128;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 4;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

/*
 * Build a custom BIOS library.  The custom library will be smaller than the 
 * pre-built "instrumented" (default) and "non-instrumented" libraries.
 *
 * The BIOS.logsEnabled parameter specifies whether the Logging is enabled
 * within BIOS for this custom build.  These logs are used by the RTA and
 * UIA analysis tools.
 *
 * The BIOS.assertsEnabled parameter specifies whether BIOS code will
 * include Assert() checks.  Setting this parameter to 'false' will generate
 * smaller and faster code, but having asserts enabled is recommended for
 * early development as the Assert() checks will catch lots of programming
 * errors (invalid parameters, etc.)
 */
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = false;
BIOS.assertsEnabled = true;

Boot.SPLLIMULT = 40;
BIOS.cpuFreq.lo = 200000000;
Boot.SYSCLKDIVSEL = 1;
Idle.idleFxns[0] = "&myIdleFxn";
Idle.idleFxns[1] = null;
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "encoder_1_trigger";
Program.global.encoder_1_trigger = Hwi.create(35, "&encoder_1_hwi", hwi1Params);
var swi0Params = new Swi.Params();
swi0Params.instance.name = "rpm1_swi";
swi0Params.priority = 5;
Program.global.rpm1_swi = Swi.create("&calculate_rpm1_swi", swi0Params);
var ti_sysbios_family_c28_Timer1Params0 = new ti_sysbios_family_c28_Timer.Params();
ti_sysbios_family_c28_Timer1Params0.instance.name = "generalTimer";
ti_sysbios_family_c28_Timer1Params0.period = 200000;
ti_sysbios_family_c28_Timer1Params0.periodType = xdc.module("ti.sysbios.interfaces.ITimer").PeriodType_COUNTS;
Program.global.generalTimer = ti_sysbios_family_c28_Timer.create(0, "&msTimerFxn", ti_sysbios_family_c28_Timer1Params0);
var hwi1Params0 = new Hwi.Params();
hwi1Params0.instance.name = "encoder_2_trigger";
Program.global.encoder_2_trigger = Hwi.create(36, "&encoder_2_hwi", hwi1Params0);
var swi1Params = new Swi.Params();
swi1Params.instance.name = "rpm2_swi";
swi1Params.priority = 5;
Program.global.rpm2_swi = Swi.create("&calculate_rpm2_swi", swi1Params);
var swi2Params = new Swi.Params();
swi2Params.instance.name = "pid_swi";
swi2Params.priority = 7;
Program.global.pid_swi = Swi.create("&control_loop_swi", swi2Params);
var hwi2Params = new Hwi.Params();
hwi2Params.instance.name = "sci_rx_trigger";
Program.global.sci_rx_trigger = Hwi.create(98, "&sci_rx_hwi", hwi2Params);
var swi3Params = new Swi.Params();
swi3Params.instance.name = "rx_swi";
swi3Params.priority = 4;
Program.global.rx_swi = Swi.create("&rxData_swi", swi3Params);
var swi4Params = new Swi.Params();
swi4Params.instance.name = "tx_swi";
swi4Params.priority = 8;
Program.global.tx_swi = Swi.create("&txData_swi", swi4Params);
Boot.OSCCLKSRCSEL = Boot.OscClk_XTAL;
Boot.disableWatchdog = true;
